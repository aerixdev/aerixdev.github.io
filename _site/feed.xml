<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-31T22:50:11+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">에어릭스 환경시스템사업부 기술블로그</title><subtitle>굴뚝산업 기업인 에어릭스에서 살아가고 있는 IT개발자들</subtitle><author><name>(주)에어릭스</name></author><entry><title type="html">2023년 세번째 내부세미나</title><link href="http://localhost:4000/2023/01/30/2023_senminar_3.html" rel="alternate" type="text/html" title="2023년 세번째 내부세미나" /><published>2023-01-30T00:00:00+09:00</published><updated>2023-01-30T00:00:00+09:00</updated><id>http://localhost:4000/2023/01/30/2023_senminar_3</id><content type="html" xml:base="http://localhost:4000/2023/01/30/2023_senminar_3.html"><![CDATA[<p>안녕하세요. 에어릭스 프론트엔드 개발자 송기영입니다. 이번주에 세미나 리뷰는 제가 맡게되었습니다 :)
지난주에 이어서 혼공학습단 9기 3주차 세미나를 진행했는데요. 요번주 주제는 데이터 정제하기였습니다. 
제가 원래 블로그에 소감을 남기지 않는데 이번주는 정말…. 양이 너무 많아서 소감을 남기는 주가 되었네요.</p>

<h2 id="혼공학습단9기-3주차-학습내용-토의">혼공학습단9기 3주차 학습내용 토의</h2>

<hr />

<p>3주차는 데이터 정제 및 데이터 수정에 대한 내용을 공부했습니다. 간략하게 말씀드리자면 데이터 정제는 <strong>불필요한 데이터</strong>를 삭제하고, <strong>중복된 데이터</strong>를 삭제하는 것을 의미합니다.</p>

<p>또한 데이터 수정은 기존 데이터에서 누락된 값을 채워넣거나 잘못된 값을 수정해서 넣어주는 작업을 의미합니다.</p>

<p>저는 개인적으로 3주차의 내용이 데이터 분석에서 가장 중요한 부분이라고 생각되는데요. 이유는 
어떤 경우에 데이터를 삭제해야하고 누락된 데이터를 어떤 데이터를 추가해줘야하는지 등의 이유가 있기 때문입니다.</p>

<p>즉 데이터 정제는 정제하는 사람에 따라 데이터의 분석 결과가 달라짐을 의미합니다.</p>

<p>따라서 경험이 많지 않은 주니어 데이터 분석가가 데이터를 정제를 진행할 경우 시니어 데이터 분석가에 비해 의미있는 데이터 분석 결과를 도출해내기 어려울 수 있기 때문입니다.</p>

<p>리뷰 후에는 야망있는 개발자가 되기 위해서는 사고력을 어떤식으로 넓혀야하는지에 관한 <del>부장님의 잔소리</del> 이야기로 끝을 맺었습니다.</p>

<p>그럼 저는 책과 뉴스를 보러 가보겠습니다. 안녕히계세요 여러분 ~</p>

<table>
    <tr><img src="/img/posts/2023-01-30/3_1.jpg" alt="세미나사진1" width="50%" /></tr>
    <tr><img src="/img/posts/2023-01-30/3_2.jpg" alt="세미나사진2" width="50%" /></tr>
</table>

<hr />

<p>다음은 개발팀원들이 혼공학습단9기 3주차 학습을 마치고, 올렸던 블로그 포스팅 내용을 확인할 수 있는 접속링크입니다. 저는 이번에 오탈자를 찾았습니다 !! <del>음하하</del></p>

<p>자세한 공부내용은 각각 블로그 포스팅으로.. 조회수를 늘려주세요!!</p>

<p><strong><a href="https://blog.naver.com/sclrnd1/222990256009">이상훈 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://devrix.tistory.com/10">손민철 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://blog.naver.com/kyg931103/222991283050">김영규 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://velog.io/@thdrldud369/%ED%98%BC%EC%9E%90-%EA%B3%B5%EB%B6%80%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D-3%EC%A3%BC%EC%B0%A8">송기영 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://velog.io/@devkangms/Chapter-03.-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%95%EC%A0%9C%ED%95%98%EA%B8%B0">강민석 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://blog.naver.com/ekcapaper/222990612262">강민구 - 학습내용 포스팅</a></strong></p>]]></content><author><name>송기영</name></author><summary type="html"><![CDATA[안녕하세요. 에어릭스 프론트엔드 개발자 송기영입니다. 이번주에 세미나 리뷰는 제가 맡게되었습니다 :) 지난주에 이어서 혼공학습단 9기 3주차 세미나를 진행했는데요. 요번주 주제는 데이터 정제하기였습니다. 제가 원래 블로그에 소감을 남기지 않는데 이번주는 정말…. 양이 너무 많아서 소감을 남기는 주가 되었네요.]]></summary></entry><entry><title type="html">피엘씨컨트롤러 (ARX.PC100)</title><link href="http://localhost:4000/2023/01/19/plc_controller_(ARX-PC100).html" rel="alternate" type="text/html" title="피엘씨컨트롤러 (ARX.PC100)" /><published>2023-01-19T00:00:00+09:00</published><updated>2023-01-19T00:00:00+09:00</updated><id>http://localhost:4000/2023/01/19/plc_controller_(ARX%20PC100)</id><content type="html" xml:base="http://localhost:4000/2023/01/19/plc_controller_(ARX-PC100).html"><![CDATA[<h2 id="소개">소개</h2>
<hr />
<p>안녕하세요~ 저희는 수집 시스템 과 웹 서비스 Back-End 를 맡아 개발을 진행한 김영규, 웹 서비스 Front-End 를 맡아 개발을 진행한 송기영 입니다.
이번에 ‘피엘씨컨트롤러’ 라는 이름의 소프트웨어를 개발하고 GS 인증 시험을 마치게 되었습니다. GS 인증은 1등급 획득에 성공을 하였습니다.</p>

<p>저희가 어떤 제품을 개발했는지 소개를 해드리고자 합니다.</p>

<p>간략하게 먼저 소개해드리면 피엘씨컨트롤러는 미들웨어 성격의 소프트웨어 이며, PLC와 통신하여 데이터를 일정 주기마다 수집하여 수집 서버로 MQTT 프로토콜을 사용하여 전달해주는 역할을하고 있습니다.
‘csv’ 형식의 파일을 포맷에 맡게 작성하여 등록을 하면 작성한 내용에 따라서 PLC 와 통신을 하여 메모리 주소의 데이터를 수집하게 됩니다. 그리고, 수집만 하는 것이 아니라 MQTT 프로토콜 메시지를 통해서
PLC 메모리 주소에 데이터를 작성하여 데이터를 변경시킵니다. 물론, PLC 내부 프로그램 혹은 모듈에 따라서 작성할 수 없는 메모리 주소가 존재합니다.
웹 서비스도 지원하여 사용자가 편리하게 웹으로 시스템을 편리하게 사용할 수 있도록 구현하였습니다.</p>

<p>아래에 제품소개서 형식으로 작성된 내용입니다.</p>

<hr />

<h1 id="피엘씨컨트롤러arxpc100">피엘씨컨트롤러(ARX.PC100)</h1>

<p>(주)에어릭스는 피엘씨컨트롤러(ARX.PC100)를 공급합니다.</p>

<h1 id="제품-개요">제품 개요</h1>

<p>PLC와 서버 어플리케이션 사이에서 통신을 중계하는 기능이 구현되어 있는 미들웨어 성격의 소프트웨어인 PLC 컨트롤러(에어릭스 자체개발 소프트웨어)를 산업용PC에 탑재하여 디바이스형으로 개발한 제품입니다. 스마트팩토리 시스템 구축 시 현장에 설치되어 있는 PLC의 데이터를 읽고(데이터 수집) 쓰기(제어 명령 전송) 위한 용도로 사용됩니다.</p>

<p>특정 PLC에 종속되지 않고 다양한 종류의 PLC 인터페이스를 지원하고 있으며, 사용자의 선택에 따라 고객사에서 개발한 PLC 인터페이스 혹은 (주)에어릭스에 요청한 PLC 인터페이스 추가가 가능합니다.</p>

<p>사용자의 편의성을 위해서 관리자 웹 페이지를 한 시스템 설정 및 디바이스 상태 모니터링을 제공하며 반응형 웹을 통해 모바일, 태블릿, PC를 지원합니다.</p>

<h1 id="제품-및-공급자-정보">제품 및 공급자 정보</h1>

<table>
  <thead>
    <tr>
      <th>제품 명</th>
      <th>ARX.PC100</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>소프트웨어</td>
      <td>피엘씨컨트롤러</td>
    </tr>
    <tr>
      <td>소프트웨어 버전</td>
      <td>v1.0</td>
    </tr>
    <tr>
      <td>소프트웨어 구성 요소</td>
      <td>- 피엘씨브로커 (수집 서비스)</td>
    </tr>
    <tr>
      <td> </td>
      <td>- 관리자 웹 (웹 서비스)</td>
    </tr>
    <tr>
      <td>하드웨어</td>
      <td>산업용 PC 장비 (YOI-S991)</td>
    </tr>
    <tr>
      <td>제조 및 공급업체</td>
      <td>㈜에어릭스</td>
    </tr>
    <tr>
      <td>제조 및 공급업체 주소</td>
      <td>경상북도 포항시 남구 대송면 철강산단로66번길 10</td>
    </tr>
    <tr>
      <td> </td>
      <td>Web: https://www.aerix.co.kr/</td>
    </tr>
    <tr>
      <td> </td>
      <td>Tel. 1899-3877</td>
    </tr>
  </tbody>
</table>

<h1 id="제품-사양">제품 사양</h1>

<p>본 제품의 하드웨어 사양은 다음과 같으며, 소프트웨어의 경우 권장 사양입니다.</p>

<ul>
  <li>
    <p>하드웨어</p>

    <table>
      <thead>
        <tr>
          <th>항목</th>
          <th>사양</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>CPU</td>
          <td>Intel i5-6200U</td>
        </tr>
        <tr>
          <td>RAM</td>
          <td>8GB</td>
        </tr>
        <tr>
          <td>HDD</td>
          <td>128GB</td>
        </tr>
        <tr>
          <td>etc</td>
          <td>LAN Port (2 ea)</td>
        </tr>
        <tr>
          <td> </td>
          <td>USB 3.0 Port (4 ea)</td>
        </tr>
        <tr>
          <td> </td>
          <td>USB 2.0 Port (4 ea)</td>
        </tr>
        <tr>
          <td>    </td>
          <td>COM Port (6 ea)</td>
        </tr>
      </tbody>
    </table>
  </li>
  <li>
    <p>소프트웨어</p>

    <table>
      <thead>
        <tr>
          <th>항목</th>
          <th>사양</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>OS</td>
          <td>Ubuntu 20.04 LTS</td>
        </tr>
        <tr>
          <td>Web Service</td>
          <td>nginx v1.22.1</td>
        </tr>
        <tr>
          <td> </td>
          <td>ASP.NET Core v5.0 runtime</td>
        </tr>
        <tr>
          <td>Collect System</td>
          <td>.NET Core v5.0 runtime</td>
        </tr>
        <tr>
          <td>Docker</td>
          <td>docker v20.10.12 , docker-compose v1.25.0</td>
        </tr>
        <tr>
          <td>VPN</td>
          <td>Wireguard-Tools v1.0</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h1 id="기대-효과">기대 효과</h1>

<p>피엘씨브로커를 사용함으로써 얻을 수 있는 기대 효과는 다음과 같습니다.</p>
<ul>
  <li>다양한 PLC 지원
    <ul>
      <li>국제 표준 통신 프로토콜 Modbus 통신 지원</li>
      <li>PLC 기존 제공 인터페이스 및 개발 인터페이스 추가 기능으로 다양한 PLC 지원</li>
    </ul>
  </li>
  <li>개발 생산성 및 운영 효율성 향상
    <ul>
      <li>웹 서비스 지원을 통한 사용자의 유지보수 용이</li>
      <li>재사용 인터페이스를 통한 커스텀 PLC 인터페이스 추가 기능으로 개발 시간 단축 효과</li>
    </ul>
  </li>
  <li>비용 절감 효과
    <ul>
      <li>최소의 개발 인력과 IT 자원 투입으로 기업 비용 부담 완화</li>
      <li>구간 암호화 통신 솔루션 도입에 따른 추가 비용 절감</li>
    </ul>
  </li>
</ul>

<h1 id="제품-시스템--서비스-구성">제품 시스템 / 서비스 구성</h1>

<p><img src="/img/posts/2023-01-19/system_architecture.png" alt="[피엘씨컨트롤러 시스템 구성]" width="80%" /></p>

<p>[피엘씨컨트롤러 시스템 구성]</p>

<p>피엘씨컨트롤러가 구성하고 있는 시스템 요소는 다음과 같습니다.</p>

<ul>
  <li>상태 모니터링
    <ol>
      <li>하드웨어 상태 정보
        <ul>
          <li>CPU , RAM , DISK 상태 정보</li>
        </ul>
      </li>
      <li>네트워크 상태 정보
        <ul>
          <li>네트워크 설정 정보</li>
        </ul>
      </li>
      <li>PLC 구성 정보
        <ul>
          <li>수집 PLC 설정 항목 정보 및 연결 상태</li>
        </ul>
      </li>
      <li>MQTT 서버 / 클라이언트 설정 정보
        <ul>
          <li>접속 Port 정보 / 익명 접속 / 인증서</li>
        </ul>
      </li>
      <li>VPN 설정 정보
        <ul>
          <li>활성화 상태 / VPN 서버 설정 정보 / 설정 공개키 정보</li>
        </ul>
      </li>
      <li>제품 정보
        <ul>
          <li>제품 / 소프트웨어 버전 정보</li>
        </ul>
      </li>
    </ol>
  </li>
  <li>데이터 수집
    <ul>
      <li>수집 시스템 (Collect System)
        <ul>
          <li>PLC → 수집 시스템 : PLC 구성 설정 메모리 데이터 조회 (수집)</li>
          <li>수집 시스템 → PLC : PLC 구성 설정 메모리 데이터 작성 (제어)</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>데이터 전송
    <ul>
      <li>수집 시스템 (Collect System)
        <ul>
          <li>수집 데이터 MQTT 프로토콜 메시지 전달 (전송)</li>
        </ul>
      </li>
      <li>MQTT 서버 (MQTT Broker)
        <ul>
          <li>수집 데이터 발행/구독 (Pub/Sub)</li>
        </ul>
      </li>
      <li>수집 서버 (Collect Server)
        <ul>
          <li>데이터 적재 (Store)</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>💡 참고
    - 웹 서비스 = 상태 모니터링 시스템 → 상태 모니터링 + 설정
    - 수집 서비스 = 수집 시스템 → 데이터 수집 + 데이터 전송
</code></pre></div></div>

<h1 id="제품-서비스-아키텍처">제품 서비스 아키텍처</h1>

<p><img src="/img/posts/2023-01-19/service_architecture.png" alt="[피엘씨컨트롤러 서비스 아키텍처]" width="80%" /></p>

<p>[피엘씨컨트롤러 서비스 아키텍처]</p>

<p>피엘씨컨트롤러가 제공하는 서비스 구성은 다음과 같습니다.</p>

<ul>
  <li>서비스 구성 및 동작
    <ul>
      <li>Web Service
        <ul>
          <li>피엘씨컨트롤러 설정 기능 웹 서비스 지원</li>
          <li>NGINX , ASP.NET</li>
        </ul>
      </li>
      <li>PLC Data Collect Service
        <ul>
          <li>PLC 통신 , 메모리 데이터 수집 / 작성 (제어)</li>
          <li>.NET</li>
        </ul>
      </li>
      <li>Data Store / Back-up Service
        <ul>
          <li>데이터 전송 실패 시 수집 데이터 백업</li>
          <li>웹 서비스 계정 관리</li>
          <li>Maria DB</li>
        </ul>
      </li>
      <li>Data Send Service
        <ul>
          <li>수집 데이터 전송 및 연결 (중계)</li>
          <li>Mosquitto</li>
        </ul>
      </li>
      <li>VPN Connect Service
        <ul>
          <li>원격지 수집 서버 및 클라이언트 구간 통신 암호화</li>
          <li>Wireguard</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h1 id="주요-기능">주요 기능</h1>

<p>피엘씨컨트롤러가 제공하는 서비스의 주요 기능들은 다음과 같습니다.</p>

<ol>
  <li>데이터 관리
    <ul>
      <li>데이터 수집
        <ul>
          <li>구성 항목의 PLC 메모리 데이터 수집 기능</li>
        </ul>
      </li>
      <li>데이터 전송
        <ul>
          <li>수집 서버로 수집 데이터 메시지 전송 기능</li>
          <li>구성 항목의 PLC 메모리 데이터 작성 전송 기능</li>
        </ul>
      </li>
      <li>데이터 백업
        <ul>
          <li>연결 실패 , 전송 실패에 해당하는 수집 데이터 저장 기능</li>
          <li>재 연결 성공 시 백업 데이터 재전송 기능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>PLC 관리
    <ul>
      <li>PLC 설정
        <ul>
          <li>데이터 수집을 위한 연결 PLC 구성 정보 등록/조회/수정/삭제 기능</li>
        </ul>
      </li>
      <li>프로토콜 설정
        <ul>
          <li>사용 가능한 PLC 통신 프로토콜 조회 , PLC 통신 프로토콜 추가 / 삭제 기능</li>
          <li>다양한 PLC 구성 확장성</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>시스템 설정
    <ul>
      <li>제어 서버 설정
        <ul>
          <li>네트워크 설정 정보 (IP 주소, 게이트웨이 등) 조회 / 설정 기능</li>
        </ul>
      </li>
      <li>MQTT 설정
        <ul>
          <li>내부 MQTT 서버 설정 정보 (포트 번호 , 계정 정보 , 인증 정보 등) 조회 / 설정 기능 , MQTT 접속을 위한 (계정 정보 , 인증 정보 , IP/Port 정보 , Topic 등) 조회 / 설정 기능</li>
        </ul>
      </li>
      <li>VPN 설정
        <ul>
          <li>암호화 통신을 위한 VPN 활성화 , 서버/클라이언트 IP 등을 조회 / 설정 기능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>대시보드 조회
    <ul>
      <li>제품 현황 조회
        <ul>
          <li>제품 디바이스 현재 상태 (CPU , 메모리 , 디스크)  조회 기능</li>
        </ul>
      </li>
      <li>PLC 현황 조회
        <ul>
          <li>현재 구성된 PLC 연결 상태 , 제조사 , 수집 주기 , 통신 프로토콜 , IP 주소 등의 정보 조회 기능</li>
        </ul>
      </li>
      <li>설정 조회
        <ul>
          <li>제품에 설정되어 있는 네트워크 , MQTT 등 정보 조회 기능</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>접근 관리
    <ul>
      <li>로그인 / 로그아웃
        <ul>
          <li>웹 서비스 접근 관리를 위한 계정 로그인 / 로그아웃 기능</li>
        </ul>
      </li>
    </ul>
  </li>
</ol>

<h1 id="웹-서비스-화면-구성">웹 서비스 화면 구성</h1>

<p>피엘씨컨트롤러가 제공하는 주요 기능들을 사용할 수 있는 웹 서비스 페이지는 다음과 같이 구성이 되어있습니다. 각 페이지 별 수행 가능한 기능은 다음과 같습니다.</p>

<ul>
  <li>
    <p>로그인</p>

    <p>웹 서비스 접근 관리(비인가 사용자 접근 방지)를 위한 계정 로그인 페이지 입니다. 기본적으로 제공되는 관리자 아이디 및 비밀번호를 이용하여 최초 로그인 후 아이디 및 비밀번호를 변경할 수 있습니다.</p>

    <p><img src="/img/posts/2023-01-19/login_page.png" alt="[관리자 웹 - 로그인 페이지]" width="100%" /></p>

    <p>[관리자 웹 - 로그인 페이지]</p>
  </li>
  <li>
    <p>대시보드</p>

    <p>제품 디바이스 현재 상태 정보 및 시스템 설정 정보를 조회할 수 있는 페이지 입니다. 10초마다 갱신하여 실시간으로 정보를 보여줍니다. [전체 조회]</p>

    <p><img src="/img/posts/2023-01-19/dashboard_page.png" alt="[관리자 웹 - 대시보드 페이지]" width="100%" /></p>

    <p>[관리자 웹 - 대시보드 페이지]</p>
  </li>
  <li>
    <p>PLC</p>

    <p>데이터를 수집하려는 PLC 구성 정보를 확인할 수 있으며, 파일 업로드를 통해서 PLC 수집 메모리 주소를 설정할 수 있는 페이지 입니다. [수집 데이터 설정]</p>

    <p><img src="/img/posts/2023-01-19/plc_page.png" alt="[관리자 웹 - PLC 페이지]" width="100%" /></p>

    <p>[관리자 웹 - PLC 페이지]</p>
  </li>
  <li>
    <p>프로토콜</p>

    <p>사용 가능한 프로토콜 목록을 조회할 수 있으며, 개발한 프로토콜을 등록(추가)하여 사용할 수 있는 페이지 입니다. 제조사가 ‘COMMON’ 인 경우 범용적으로 사용하는 프로토콜임을 나타냅니다.</p>

    <p><img src="/img/posts/2023-01-19/protocol_page.png" alt="[관리자 웹 - 프로토콜 페이지]" width="100%" /></p>

    <p>[관리자 웹 - 프로토콜 페이지]</p>
  </li>
  <li>
    <p>설정</p>

    <p>제품 디바이스 <strong>연결</strong>을 위한 네트워크 , 수집한 데이터를 <strong>전송</strong>하기 위한 MQTT 클라이언트 , ‘수집 데이터/요청 메시지’ 를 <strong>수신</strong>하기 위한 MQTT 서버 의 정보를 조회하거나 설정할 수 있는 페이지 입니다.</p>

    <p><img src="/img/posts/2023-01-19/setting_page.png" alt="[관리자 웹 - 설정 페이지]" width="100%" /></p>

    <p>[관리자 웹 - 설정 페이지]</p>
  </li>
  <li>
    <p>보안</p>

    <p>전송되는 수집 데이터의 보안을 위한 암호화 통신 정보들을 조회하거나 설정할 수 있는 페이지 입니다. 설정 내용은 클라이언트 자격으로 설정한 정보의 VPN 서버에 연결하게 됩니다.</p>

    <p><img src="/img/posts/2023-01-19/security_page.png" alt="[관리자 웹 - 보안 페이지]" width="100%" /></p>

    <p>[관리자 웹 - 보안 페이지]</p>
  </li>
</ul>

<h1 id="수집-시스템-동작-구성">수집 시스템 동작 구성</h1>

<ul>
  <li>데이터 수집 및 전송
    <ul>
      <li>
        <p>‘디바이스 상태 , PLC 메모리 데이터’ 의 수집 정보를 수집 서버에 전송합니다.</p>

        <p><img src="/img/posts/2023-01-19/data_collect.png" alt="[테스트 프로그램으로 확인한 수집 데이터 확인]" width="100%" /></p>

        <p>[테스트 프로그램으로 확인한 수집 데이터 확인]</p>
      </li>
    </ul>
  </li>
  <li>특정 PLC 메모리 데이터 조회
    <ul>
      <li>
        <p>설정한 PLC 의 특정 태그의 데이터를 조회한다.</p>

        <p><img src="/img/posts/2023-01-19/data_read_request_1.png" alt="[테스트 프로그램으로 요청한 특정 메모리 데이터 확인]" width="100%" /></p>

        <p>[테스트 프로그램으로 요청한 특정 메모리 데이터 확인]</p>
      </li>
    </ul>
  </li>
  <li>특정 PLC 메모리 데이터 작성
    <ul>
      <li>
        <p>설정한 PLC 의 특정 태그의 데이터를 작성한다.</p>

        <ol>
          <li>
            <p>특정 태그의 메모리 데이터 변경</p>

            <p><img src="/img/posts/2023-01-19/data_write_request.png" alt="[테스트 프로그램으로 요청한 특정 메모리 데이터 작성]" width="90%" /></p>

            <p>[테스트 프로그램으로 요청한 특정 메모리 데이터 작성]</p>
          </li>
          <li>
            <p>특정 태그의 메모리 데이터 변경 확인</p>

            <p><img src="/img/posts/2023-01-19/data_read_request_2.png" alt="[테스트 프로그램으로 요청한 특정 메모리 데이터 확인]" width="90%" /></p>

            <p>[테스트 프로그램으로 요청한 특정 메모리 데이터 확인]</p>

            <p><img src="/img/posts/2023-01-19/plc_program_monitor.png" alt="[PLC 툴 프로그램으로 확인한 메모리 데이터 확인]" width="90%" /></p>

            <p>[PLC 툴 프로그램으로 확인한 메모리 데이터 확인]</p>
          </li>
        </ol>
      </li>
    </ul>
  </li>
  <li>전송 실패 데이터 저장 ( 데이터 백업 )
    <ul>
      <li>
        <p>수집 서버에 연결 실패 혹은 다른 사유에 의한 전송 실패 시 해당 데이터가 누락되지 않게 저장을 하여 재 전송을 할 수 있도록 데이터를 백업합니다.</p>

        <p><img src="/img/posts/2023-01-19/back_up_db.png" alt="[저장된 수집 데이터 확인]" width="100%" /></p>

        <p>[저장된 수집 데이터 확인]</p>
      </li>
    </ul>
  </li>
</ul>

<h1 id="소프트웨어-품질-인증">소프트웨어 품질 인증</h1>

<div class="pull-left">
    <img src="/img/posts/2023-01-19/gs_certificate_korean.png" alt="[GS 인증서 - 한글]" width="50%" />
</div>
<div class="pull-right">
    <img src="/img/posts/2023-01-19/gs_certificate_english.jpg" alt="[GS 인증서 - 영문]" width="50%" />
</div>

<p>(GS 인증) - 자체 개발 ‘피엘씨컨트롤러’로 소프트웨어 품질 인증 GS 인증 획득 [한국정보통신기술협회 - 23.01.16]</p>

<h1 id="제품-납품-목록">제품 납품 목록</h1>

<ul>
  <li>제품
    <ul>
      <li>
        <p>ARX.PC100 [하드웨어 : 산업용 PC , 소프트웨어 : 피엘씨컨트롤러]</p>

        <p><img src="/img/posts/2023-01-19/plc_controller_front.png" alt="[ARX.PC100 제품 이미지 - 앞면]" width="80%" /></p>

        <p>[ARX.PC100 제품 이미지 - 앞면]</p>

        <p><img src="/img/posts/2023-01-19/plc_controller_back.png" alt="[ARX.PC100 제품 이미지 - 뒷면]" width="80%" /></p>

        <p>[ARX.PC100 제품 이미지 - 뒷면]</p>
      </li>
    </ul>
  </li>
  <li>매뉴얼
    <ul>
      <li>사용자 매뉴얼 [관리자 웹 동작 , SSH 접속 수동 동작]</li>
      <li>개발자 매뉴얼 [PLC 통신 프로토콜 개발 인터페이스 , 데이터 전송 메시지(MQTT) 형식]</li>
    </ul>
  </li>
</ul>

<h1 id="기술-지원-사항">기술 지원 사항</h1>

<ul>
  <li>AS
    <ul>
      <li>본 규정은 AERIX에서 판매한 제품에 대하여 <strong>유지보수</strong> 및 <strong>수리</strong>를 할 경우 보증기간이 경과되었거나, 보증기간 이내라도 유상수리에 해당되는 경우 AS비용과 절차에 대한 정의입니다.</li>
      <li>참고 <strong>링크 :</strong> <a href="https://www.notion.so/AS-bf55ef32085a46d9a181ce60c1db3ed4">AS 정책</a></li>
    </ul>
  </li>
  <li>고객 지원
    <ul>
      <li>계약 기간 내 제품 설치 및 사용 중 발생되는 문의에 대해서는 이메일 혹은 유선 접수 후 순차 처리됩니다.</li>
      <li>지원내용
        <ul>
          <li>개별 기능에 대한 문의는 이메일 혹은 유선을 통해 안내해드립니다.</li>
          <li>제품 기능 결함 지원 (원격 지원 요청 시 아래의 연락처로 연락 주시기 바랍니다.)</li>
        </ul>
      </li>
      <li>고객지원 담당부서 : (주)에어릭스 ES사업부</li>
      <li>전화 : 1899-3877</li>
      <li>이메일 : <a href="mailto:iot@aerix.co.kr">iot@aerix.co.kr</a></li>
      <li>지원시간 : 평일 오전 9시 ~ 오후 5시 (공휴일 제외)</li>
    </ul>
  </li>
</ul>

<h1 id="마치며-">마치며 ..</h1>

<p>이제 막 GS 인증을 끝냈기 때문에 실제 현장에서 사용할 때 개선점들이 충분히 나올 것이라고 생각합니다. 이런 점들을 꾸준히 개선하면 정말 좋은 제품이 완성되지 않을까 합니다..!
많은 관심 부탁드립니다 !</p>

<p>다음에는 GS 인증 후기에 대한 포스팅 글로 다시 찾아뵙겠습니다~! 감사합니다.</p>

<p>추가적으로 저희 제품 공식 설명서는 공식 제품 설명서 <a href="https://aerixes.notion.site/ec0559d109a140a5ad020d49b20868b3">[이동]</a>를 누르시면 확인하실수 있습니다.</p>]]></content><author><name>김영규 , 송기영</name></author><summary type="html"><![CDATA[소개 안녕하세요~ 저희는 수집 시스템 과 웹 서비스 Back-End 를 맡아 개발을 진행한 김영규, 웹 서비스 Front-End 를 맡아 개발을 진행한 송기영 입니다. 이번에 ‘피엘씨컨트롤러’ 라는 이름의 소프트웨어를 개발하고 GS 인증 시험을 마치게 되었습니다. GS 인증은 1등급 획득에 성공을 하였습니다.]]></summary></entry><entry><title type="html">2023년 두번째 내부세미나</title><link href="http://localhost:4000/2023/01/16/2023_senminar_2.html" rel="alternate" type="text/html" title="2023년 두번째 내부세미나" /><published>2023-01-16T00:00:00+09:00</published><updated>2023-01-16T00:00:00+09:00</updated><id>http://localhost:4000/2023/01/16/2023_senminar_2</id><content type="html" xml:base="http://localhost:4000/2023/01/16/2023_senminar_2.html"><![CDATA[<p>지난주에 이어서 혼공학습단 9기 2주차 세미나를 진행했습니다. 1주차에 비해 비교적 공부량이 많아서 많이들 힘들었다고 하네요.(특히 나) 
각자 블로그에 공부한 내용을 보고 느낀점, 공유하고 싶은 내용들을 나누었습니다.</p>

<h2 id="혼공학습단9기-2주차-학습내용-토의">혼공학습단9기 2주차 학습내용 토의</h2>

<hr />

<p>2주차는 데이터 수집 챕터였는데 API사용법, 웹스크래핑에 대해서 공부하였습니다. 사실, API는 이미 다들 많이 사용해서 친숙한 부분이기 때문에, 특별히 이야기 나누었던 것은 없었습니다. XML파일의 구조에 대해서 잠깐 얘기한 정도?</p>

<p>웹스크래핑에 대해서는 웹스크래핑의 절차, 사용하는 경우 등과 웹스크래핑을 이용하여 업무 중 생산성을 올릴 수 있는 방법, 적용 대상에 대해 이야기 나누었네요. 웹스크래핑을 좀 더 공부해본다면 웹페이지에서 세팅하는 여러 경우를 자동화 할 수 있겠네요.</p>

<p>오히려 이 후 개발자로써의 방향성, 태도와 관련 된 얘기를 나누었는데 그것도 의미있는 시간이었습니다.</p>

<table>
    <tr><img src="/img/posts/2023-01-18/세미나2주차_1.jpg" alt="세미나사진1" width="50%" /></tr>
    <tr><img src="/img/posts/2023-01-18/세미나2주차_2.jpg" alt="세미나사진2" width="50%" /></tr>
</table>

<p><br /></p>

<hr />

<p>다음은 개발팀원들이 혼공학습단9기 2주차 학습을 마치고, 올렸던 블로그 포스팅 내용을 확인할 수 있는 접속링크입니다. 지난번에 올렸던 혼공족장 평가는 족장님이 부끄러우시다네요.</p>

<p>자세한 공부내용은 각각 블로그 포스팅으로.. 조회수를 늘려주세요!!</p>

<p><strong><a href="https://blog.naver.com/sclrnd1/222983762839">이상훈 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://devrix.tistory.com/8">손민철 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://blog.naver.com/kyg931103/222978464499">김영규 - 학습내용 포스팅-1</a></strong></p>

<p><strong><a href="https://blog.naver.com/kyg931103/222985072102">김영규 - 학습내용 포스팅-2</a></strong></p>

<p><strong><a href="https://velog.io/@thdrldud369/series/%ED%98%BC%EA%B3%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D">송기영 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://velog.io/@devkangms/%EC%B1%95%ED%84%B01.-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0">강민석 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://blog.naver.com/ekcapaper/222984753842">강민구 - 학습내용 포스팅</a></strong></p>]]></content><author><name>손민철</name></author><summary type="html"><![CDATA[지난주에 이어서 혼공학습단 9기 2주차 세미나를 진행했습니다. 1주차에 비해 비교적 공부량이 많아서 많이들 힘들었다고 하네요.(특히 나) 각자 블로그에 공부한 내용을 보고 느낀점, 공유하고 싶은 내용들을 나누었습니다.]]></summary></entry><entry><title type="html">2023년 첫 내부세미나</title><link href="http://localhost:4000/2023/01/09/2023_seminar_1.html" rel="alternate" type="text/html" title="2023년 첫 내부세미나" /><published>2023-01-09T00:00:00+09:00</published><updated>2023-01-09T00:00:00+09:00</updated><id>http://localhost:4000/2023/01/09/2023_seminar_1</id><content type="html" xml:base="http://localhost:4000/2023/01/09/2023_seminar_1.html"><![CDATA[<p>지난 포스팅에서 공지했던 것처럼 개발팀 1월과 2월 내부세미나는 한빛미디어에서 운영하는 혼공학습단 활동으로 대체하기로 했습니다.
혼공학습단 활동방법은 매주 정해진 범위를 스스로 공부하고 학습한 내용과 미션수행 내용을 정리해서 블로그에 포스팅하는 것입니다.</p>

<p>매우 간단하죠? 그런데 이제와서 이야기하는 것이지만 사실 1주차부터 탈락자가 나올까봐 걱정했던 것도 사실입니다. 
다행히 1주차에는 탈락자는 없었습니다.</p>

<h2 id="혼공학습단9기-1주차-학습내용-토의">혼공학습단9기 1주차 학습내용 토의</h2>

<hr />

<p>사실 1주차에는 부담없이 가볍게 읽고 넘어갈 수 있는 내용이라 토의를 할 만한게 없었습니다. 다만, 너무 성의없이 포스팅을 한 것처럼
보이는 강x구 사원한테 잔소리를 했을 뿐이고, 미션문제 풀이에 틀린 답을 올려놓고 100점이죠?라고 자신있게 포스팅했던 손x철 대리한테 왜 그랬냐고
물어봤을 뿐입니다.</p>

<table>
    <tr><img src="/img/posts/2023-01-09/room1.jpg" alt="세미나사진1" width="50%" /></tr>
    <tr><img src="/img/posts/2023-01-09/room2.jpg" alt="세미나사진2" width="50%" /></tr>
</table>

<p><br /></p>

<h2 id="학습내용-포스팅-링크-및-혼공족장님의-평가">학습내용 포스팅 링크 및 혼공족장님의 평가</h2>

<hr />

<p>다음은 개발팀원들이 혼공학습단9기 1주차 학습을 마치고, 올렸던 블로그 포스팅 내용을 확인할 수 있는 접속링크입니다.</p>

<p>참고) 혼공족장님의 댓글(미션수행 확인)은 블로그 포스팅에서 삭제했습니다. 혼공족장님이 부끄럽다고 하셔서……..</p>

<p><strong><a href="https://blog.naver.com/sclrnd1/222969120393">이상훈 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://devrix.tistory.com/7">손민철 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://blog.naver.com/kyg931103/222978464499">김영규 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://velog.io/@thdrldud369/series/%ED%98%BC%EA%B3%B5-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B6%84%EC%84%9D">송기영 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://velog.io/@devkangms/%EC%B1%95%ED%84%B01.-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B6%84%EC%84%9D%EC%9D%84-%EC%8B%9C%EC%9E%91%ED%95%98%EB%A9%B0">강민석 - 학습내용 포스팅</a></strong></p>

<p><strong><a href="https://blog.naver.com/ekcapaper/222977397258">강민구 - 학습내용 포스팅</a></strong></p>]]></content><author><name>이상훈</name></author><summary type="html"><![CDATA[지난 포스팅에서 공지했던 것처럼 개발팀 1월과 2월 내부세미나는 한빛미디어에서 운영하는 혼공학습단 활동으로 대체하기로 했습니다. 혼공학습단 활동방법은 매주 정해진 범위를 스스로 공부하고 학습한 내용과 미션수행 내용을 정리해서 블로그에 포스팅하는 것입니다.]]></summary></entry><entry><title type="html">PM2 및 오프라인(폐쇄망) 설치</title><link href="http://localhost:4000/2023/01/09/offline_pm2_docker.html" rel="alternate" type="text/html" title="PM2 및 오프라인(폐쇄망) 설치" /><published>2023-01-09T00:00:00+09:00</published><updated>2023-01-09T00:00:00+09:00</updated><id>http://localhost:4000/2023/01/09/offline_pm2_docker</id><content type="html" xml:base="http://localhost:4000/2023/01/09/offline_pm2_docker.html"><![CDATA[<h1 id="pm2-오프라인-설치">PM2 오프라인 설치</h1>

<h2 id="0-개요">0. 개요</h2>

<p>pm2를 폐쇄망 환경에서 설치하려고 하면, 각종 선행 패키지들을 모두 수동으로 설치하는 고통스러운 과정을 거쳐야합니다.
하지만 위대한 선배 개발자의 도움을 통해 쉽게 설치하는 방법이 있어 공유해봅니다.</p>

<p>pm2-installer를 통해 설치하게 되며, 인터넷이 가능한 PC에서 설치 파일 제작 후, 오프라인 PC로 옮겨서 설치하게 됩니다.</p>

<p>pm2-installer 링크.</p>

<p>https://github.com/jessety/pm2-installer</p>

<h2 id="1-같은-버전의-nodejs-설치">1. 같은 버전의 NodeJS 설치</h2>

<p>설치 파일 제작 시, 대상 PC와 파일 제작 PC의 node 및 npm 버전이 동일해야 합니다.</p>

<p>노드 구버전은 다음 링크에서 구할 수 있습니다.
<a href="https://nodejs.org/ko/download/releases/">https://nodejs.org/ko/download/releases/</a></p>

<p>폐쇄망 PC에 노드와 npm이 없다면, 패키지 파일을 다운로드 후 다음과 같은 과정을 거쳐 설치 해줍니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># 인터넷이 가능한 PC에서 다운로드</span>
wget <span class="nv">$파</span>일링크

<span class="c"># USB나 SCP 등을 이용해 설치 대상 PC로 파일을 옮겨줍니다.</span>

<span class="c"># lib 폴더로 옮기기</span>
<span class="nb">mv</span> <span class="nv">$파</span>일 /usr/local/lib

<span class="c"># 파일 압축풀기</span>
<span class="nb">tar </span>xvf <span class="nv">$파</span>일

<span class="c"># 명령어를 통한 바로 실행을 위해 심볼릭 링크 등록</span>
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/lib/<span class="nv">$노</span>드폴더/bin/<span class="k">*</span> /usr/local/bin/
</code></pre></div></div>

<h2 id="2-pm2-설치-파일-제작">2. PM2 설치 파일 제작</h2>

<p>pm2-installer를 다운받고 압축을 풀어줍니다.  압축 푼 폴더로 이동 후 작업합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd </span>pm2-installer-main

npm run bundle

<span class="c"># pm2 버전에 따라 지원하는 node 버전이 다르므로 확인이 필요합니다.</span>
<span class="c"># pm2 버전 변경이 필요한 경우 다음과 같이 package.json 파일 수정 후에 bundle 명령을 내립니다.</span>

<span class="nb">sudo </span>vi package.json

<span class="s2">"dependencies"</span>: <span class="o">{</span>
    <span class="s2">"@jessety/pm2-logrotate"</span>: <span class="s2">"^2.7.1"</span>,
    <span class="s2">"node-windows"</span>: <span class="s2">"1.0.0-beta.6"</span>,
    <span class="s2">"pm2"</span>: <span class="s2">"4.0.0"</span> &lt;&lt; 버전 변경
  <span class="o">}</span>,
  <span class="s2">"devDependencies"</span>: <span class="o">{</span>
    <span class="s2">"@jessety/eslint-config"</span>: <span class="s2">"^1.0.8"</span>,
    <span class="s2">"editorconfig-checker"</span>: <span class="s2">"^4.0.2"</span>,
    <span class="s2">"eslint"</span>: <span class="s2">"5.16.0"</span> &lt;&lt; 버전 변경
  <span class="o">}</span>
</code></pre></div></div>

<h2 id="3-설치-파일-배포">3. 설치 파일 배포</h2>

<p>bundle 작업을 한 후 폴더 전체를 다시 압축하여 대상 pc로 옮겨줍니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-cvf</span> bundle.tar pm2-installer-main

<span class="c"># 파일 옮기기</span>
<span class="c"># 대상 PC에서 압축풀기</span>

<span class="nb">tar</span> <span class="nt">-xvf</span> bundle.tar

<span class="c"># 폴더로 이동</span>
<span class="nb">cd </span>pm2-installer-main

<span class="c"># 설치하기</span>
npm run setup

<span class="c"># 심볼릭 링크 등록</span>
<span class="nb">ln</span> <span class="nt">-s</span> /usr/local/lib/<span class="nv">$노</span>드폴더/bin/<span class="k">*</span> /usr/local/bin/
</code></pre></div></div>

<p>설치가 완료되었습니다.</p>

<h3 id="외전-docker-오프라인-설치">외전. Docker 오프라인 설치</h3>

<p>폐쇄망에서 Docker를 설치하는 방법은 더욱 간단합니다.
아래 링크에서 원하는 Dockere 패키지를 다운 받습니다.</p>

<p>https://download.docker.com/linux/static/stable/x86_64/</p>

<p>SCP나 USB등의 방법을 활용해 폐쇄망으로 패키지 파일을 옮겨준 후, 압축을 풀어줍니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">tar</span> <span class="nt">-xvf</span> <span class="nv">$도</span>커압축파일
</code></pre></div></div>

<p>이후 압축 풀어서 나온 모든 파일을 /usr/bin/ 폴더로 옮겨주면 docker 실행이 가능합니다.</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo mv</span> <span class="nv">$압</span>축해제한폴더/<span class="k">*</span> /usr/bin

<span class="c">#도커 실행</span>
<span class="nb">sudo </span>dockered &amp;
</code></pre></div></div>]]></content><author><name>강민석</name></author><summary type="html"><![CDATA[PM2 오프라인 설치]]></summary></entry><entry><title type="html">혼공스터디9기 활동시작</title><link href="http://localhost:4000/2023/01/05/hongong9th.html" rel="alternate" type="text/html" title="혼공스터디9기 활동시작" /><published>2023-01-05T00:00:00+09:00</published><updated>2023-01-05T00:00:00+09:00</updated><id>http://localhost:4000/2023/01/05/hongong9th</id><content type="html" xml:base="http://localhost:4000/2023/01/05/hongong9th.html"><![CDATA[<h2 id="혼공스터디-9기-활동을-시작하다">혼공스터디 9기 활동을 시작하다</h2>

<p>2023년 새해가 시작되었습니다. 개발팀 내부 세미나를 올해에는 다양한 방식으로 진행해보고 싶었습니다.
그래서 1월과 2월은 IT서적 전문 출판사에서 주관하는 <혼공스터디>라는 프로그램에 참여해서 활동하는 방식으로
세미나를 진행하려고 합니다.</혼공스터디></p>

<p><img src="/img/posts/2023-01-05/hongong1.jpg" alt="혼공학습단" width="100%" /></p>

<p>혼공학습단 활동은 간단합니다. 도서를 선택하고, 학습스케줄에 맞춰서 6주동안 공부하고 미션을 수행한 내용을
SNS에 올려서 확인을 받으면 됩니다. 관련된 자세한 정보는 아래에 있는 페이스북 혼공스터디 그룹에 가시면 확인하실 수 있습니다.</p>

<p><strong><a href="https://www.facebook.com/groups/hongong/permalink/1185966548987467">페이스북 혼공스터디 그룹</a></strong>
https://www.facebook.com/groups/hongong/permalink/1185966548987467</p>

<hr />

<h2 id="혼자공부하는-데이터분석-with-파이썬">혼자공부하는 데이터분석 with 파이썬</h2>

<p>저희 개발팀이 혼공스터디 활동을 통해서 공부하려고 선택한 도서는 <code class="language-plaintext highlighter-rouge">혼자공부하는 데이터분석 with 파이썬</code>입니다.</p>

<p><img src="/img/posts/2023-01-05/hongong2.jpg" alt="혼자공부하는 데이터분석 with 파이썬" width="30%" /></p>

<p>사실 회사 생활하다보면 이런저런 핑계를 대면서 아무리 쉬운 내용이라도 책 한권을 온전히 읽어보면서
공부한다는게 쉬운 일은 아닐 것입니다. 특별한 노력이 뒷받침된다면 모르겠지만요. 혼공스터디 활동을 통해서 2023년 
시작부터 책 한권이라도 공부를 끝낼 수 있다면 뿌듯하기도 할 것 같습니다.</p>

<p>아래는 저희가 활동할 혼공학습단9기의 학습스케줄입니다. 중도탈락하지 않고 모두 완주할 수 있도록 노력하겠습니다.</p>

<p><img src="/img/posts/2023-01-05/hongong3.png" alt="학습일정" width="100%" /></p>

<hr />

<h2 id="개발팀-세미나---혼공학습단-학습-내용-토의">개발팀 세미나 - 혼공학습단 학습 내용 토의</h2>

<p>개발팀 세미나는 혼공학습단 활동을 통해서 학습한 내용을 가지고 토의하는 시간이 될 것 같습니다. 이런 활동들 모두
블로그를 통해서 공개할 예정입니다.</p>

<p>감사합니다.</p>]]></content><author><name>이상훈</name></author><summary type="html"><![CDATA[혼공스터디 9기 활동을 시작하다]]></summary></entry><entry><title type="html">한해를 돌아보며…..</title><link href="http://localhost:4000/2022/12/22/self_reflection.html" rel="alternate" type="text/html" title="한해를 돌아보며….." /><published>2022-12-22T00:00:00+09:00</published><updated>2022-12-22T00:00:00+09:00</updated><id>http://localhost:4000/2022/12/22/self_reflection</id><content type="html" xml:base="http://localhost:4000/2022/12/22/self_reflection.html"><![CDATA[<p>아침에 출근해보니 책상 위에 2023년 다이어리가 놓여져 있는 것이 보였습니다. 
짧은 순간이기는 했지만, <code class="language-plaintext highlighter-rouge">올 한해도 벌써 다 지나갔구나</code>라는 아쉬움을 찐하게 마주할 수 있었습니다.</p>

<p><img src="/img/posts/2022-12-22/2023_diary.jpg" alt="2023년 다이어리" width="30%" class="left" /></p>

<p>돌이켜보면 2022년 우리 개발팀 팀원분들 모두 정말 바쁘게 열심히 살았던 것 같습니다. 물론, 죽어라 열심히 일만 하면서 살았던 
것은 아니겠지요. 적당히 분위기 보면서 게으름도 피우면서 지내기도 했습니다. 그렇지만, 집중해야 할 순간이 오면 자신이 가지고 있는
모든 역량을 쏟아 최선을 다하는 모습도 보였습니다. 그리고 실제로 좋은 성과들로 이어졌습니다.</p>

<p>클린팩토리 정부R&amp;D과제 수주, P사 ISDC DB서버 증설완료, P사 집진기 건전성 모니터링 시스템 준공 등등 올해 했던 많은 일들을 
자랑스럽게 생각하셔도 될 것 같습니다.</p>

<p>현재에 만족하지 않고 내년에도 계속 노력해주실 것이라 믿습니다. 내년에는 올해보다 더 즐겁게 일할 수 있는 환경을
만들어보겠습니다.</p>

<p><img src="/img/posts/2022-12-22/thanks.gif" alt="감사합니다." width="30%" class="left" /></p>]]></content><author><name>이상훈</name></author><summary type="html"><![CDATA[아침에 출근해보니 책상 위에 2023년 다이어리가 놓여져 있는 것이 보였습니다. 짧은 순간이기는 했지만, 올 한해도 벌써 다 지나갔구나라는 아쉬움을 찐하게 마주할 수 있었습니다.]]></summary></entry><entry><title type="html">GRAPHQL - 효율적인 데이터사용 웹서비스 아키텍처</title><link href="http://localhost:4000/2022/11/30/graphql.html" rel="alternate" type="text/html" title="GRAPHQL - 효율적인 데이터사용 웹서비스 아키텍처" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/2022/11/30/graphql</id><content type="html" xml:base="http://localhost:4000/2022/11/30/graphql.html"><![CDATA[<p>안녕하세요. 에어릭스 개발팀 손민철입니다. 기존에 임베디드 분야에 몸을 담다가 이렇게 백엔드관련 지식을 습득하고 글을 쓰려고 하니 감회가 새롭습니다. 공부를 하면할 수록 기존에 안보이던 부분들이 이해가 되는 것이 참 기분이 좋습니다. 요번 Posting에서 작성할 내용은 GRAPHQL 아키텍처이고 기존에 산업에서 많이 사용되는 Rest api 아키텍처를 대체할 수 있는 웹서비스 아키텍처입니다. 어떠한 장,단점이 있고 어떻게 사용해야 하는 지 같이 보시죠.</p>

<hr />

<h2 id="graphql이란">GRAPHQL이란?</h2>

<p><img src="/img/posts/2022-11-30/facebook.png" alt="Facebook" width="100%" class="center" /></p>

<p>GRAPHQL이란 Facebook에서 2015년에 개발한 데이터 질의어로 웹서비스 아키텍처을 대체할 수 있습니다. 이에 대중적으로 사용되는 웹서비스 아키텍처인 rest api와 비교가 되고 rest api가 가지고 있는 overfetching, underfetching 문제(아래에서 다룰 예정)를 개선하였습니다.</p>

<p><img src="/img/posts/2022-11-30/graphql.png" alt="Graphql" width="100%" class="center" /></p>

<p><img src="/img/posts/2022-11-30/query.png" alt="query" width="100%" class="center" /></p>

<p>위 첫번째 사진은 GRAPHQL의 homepage Main에 있는 것을 캡처한 것으로 GRAPHQL의 동작을 단적으로 나타냅니다. 데이터타입을 작성하고(Describe) 데이터를 요청하고(Ask for) 적절한 대답을 응답받는 것(get predictable results)입니다. 두번째 사진에서는 직접 구현한 동작의 예시입니다. 원하는 데이터타입을 작성하고(Describe) 그에 상응하는 적절한 데이터 요청합니다.(Ask for) 그리고 response로 적절한 응답을 받습니다.(get predictable results)</p>

<h2 id="vs-rest-api">vs Rest API</h2>

<p>웹서비스 아키텍처로 많이 사용되는 Rest API에는 두가지 문제점이 있습니다. Overfetching, Underfetching인데 각 개념과 GRAPHQL에서 어떻게 개선되었는 지 보겠습니다.</p>

<ul>
  <li>overfetching</li>
</ul>

<p><img src="/img/posts/2022-11-30/overfetching.png" alt="overfetching" width="100%" class="center" /></p>

<p>Rest api에서는 하나의 url에 요청(Request)을 보내면 응답 전체를 무조건적으로 응답(Response)받아야 합니다. 즉, 불필요한 데이터까지 응답받아야 하기 때문에 필요이상으로 데이터 전송량이 늘어 납니다. GRAPHQL에서는 작성한 데이터타입 중에서도 필요한 데이터만 마치 SQL문에서 Query를 날리듯이 작성하면 필요한 데이터만 수집할 수 있습니다.</p>

<ul>
  <li>underfetching</li>
</ul>

<p><img src="/img/posts/2022-11-30/underfetching.png" alt="underfetching" width="100%" class="center" /></p>

<p>또한, Rest api에서는 여러 계층으로 나눠진 데이터들을 한 번에 요청하여 수집할 수 없습니다. 예를 들어, url:port/getdata1. url:port/getdata2 두 개의 계층의 데이터를 얻기 위해서는 각각 다른 요청을 보내야 합니다. 그런데 GRAPHQL에서는 하나의 query요청에 여러 계층을 포함하여 데이터 전송횟수를 감소시킬 수 있습니다.</p>

<p>하나 더, GRAPHQL은 하나의 endpoint만 이용합니다. 즉 url작성으로 시간을 낭비할 필요가 없습니다!!</p>

<h2 id="graphql-작성">GRAPHQL 작성</h2>

<p><img src="/img/posts/2022-11-30/apolo.png" alt="apolo" width="100%" class="center" /></p>

<p>자, 이제까지 GRAPHQL이란 무엇인가에 대해 살펴보았고 실제 GRAPHQL을 어떻게 사용하는 지 구현해보겠습니다. GRAPHQL도 REST API와 같이 개발자간의 명세,형식을 뿐입니다. 따라서 실제 이 규정에 맞에 데이터를 요청하고 응답할 수 있는 solution이 필요합니다. 저는 이번 예제에서 APOLO 솔루션을 사용할 예정입니다. javascript에 모듈형식으로 사용할 수 있어 쉽고 FRONT, BACK-END Solution을 전부 제공하기에 편리하여 이 솔루션을 선정하였습니다.</p>

<p><img src="/img/posts/2022-11-30/datatype.png" alt="datatype" width="100%" class="center" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">describe your data</code></strong> : 데이터/요청 타입, 요청에 대한 Action을 작성합니다. Apolo server를 구동하기 위해서는 typeDefs, resolvers 인자가 필요합니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>typeDefs : Graphql에 사용될 데이터, 요청타입을 작성합니다. 여기 요청타입이란 query, mutation 명세타입을 말하고 어떤 식으로 요청을 보낼 것인지를 결정합니다.
resolvers : 실제 Graphql요청이 왔을 때의 동작(Action)을 작성합니다.
</code></pre></div></div>

<p><img src="/img/posts/2022-11-30/query2.png" alt="query" width="100%" class="center" /></p>

<p><img src="/img/posts/2022-11-30/mutation.png" alt="mutation" width="100%" class="center" /></p>

<p><strong><code class="language-plaintext highlighter-rouge">ask for what you want &amp; get predictable results</code></strong> : 실제 데이터 요청(query, mutation)을 하고 적절한 응답을 받습니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>query : 원하는 데이터를 요청합니다.
mutation : 원하는 데이터를 삭제,수정,추가합니다.
</code></pre></div></div>

<p>간단히 어떻게 GRAPHQL 작성을 하는 지 살펴보았는데 더 구체적인 내용은 내용이 길어지는 관계로 다루지 않겠습니다.</p>

<h2 id="마치며">마치며</h2>
<p>실제 GRAPHQL로 구현을 해보니 데이터,요청 타입을 작성하는 과정이 생각보다 쉽지는 않았습니다. 이는 GRAPHQL에 단점이라고 생각합니다. 다만, 이런 처음 작성의 불편함에도 불구하고 데이터 전송량 감소, 데이터 요청 횟수 감소, 하나의 end-point로만 요청이라는 장점을 가지고 있어 매력적인 웹서비스 아키텍처라고 생각합니다. 또한 GRAPHQL기반 BACK-END개발자가 스키마 DOC을 FRONT개발자에게 제공한다면 특정데이터가 필요할 때 API를 새로 만드는 것이 아니라, 그에 맞게 Query를 요청하기만 하면 되서 업무적인 효율도 올라갈 것이라고 생각합니다. 다만 특정데이터를 항상 요청하고 응답받아야 한다면 오히려 Rest Api가 좋은 성능을 보입니다. 따라서 상황에 맞게 Rest API, GRAPHQL을 사용하는 것이 좋아보이고 추 후에 그 후기를 작성해보도록 하겠습니다.</p>]]></content><author><name>손민철</name></author><summary type="html"><![CDATA[안녕하세요. 에어릭스 개발팀 손민철입니다. 기존에 임베디드 분야에 몸을 담다가 이렇게 백엔드관련 지식을 습득하고 글을 쓰려고 하니 감회가 새롭습니다. 공부를 하면할 수록 기존에 안보이던 부분들이 이해가 되는 것이 참 기분이 좋습니다. 요번 Posting에서 작성할 내용은 GRAPHQL 아키텍처이고 기존에 산업에서 많이 사용되는 Rest api 아키텍처를 대체할 수 있는 웹서비스 아키텍처입니다. 어떠한 장,단점이 있고 어떻게 사용해야 하는 지 같이 보시죠.]]></summary></entry><entry><title type="html">Redis란?</title><link href="http://localhost:4000/2022/11/16/redis.html" rel="alternate" type="text/html" title="Redis란?" /><published>2022-11-16T00:00:00+09:00</published><updated>2022-11-16T00:00:00+09:00</updated><id>http://localhost:4000/2022/11/16/redis</id><content type="html" xml:base="http://localhost:4000/2022/11/16/redis.html"><![CDATA[<h1 id="redis란">Redis란?</h1>

<h2 id="목차">목차</h2>

<ol>
  <li>Redis란?</li>
  <li>Redis - NoSQL</li>
  <li>Redis - 영속성</li>
  <li>자료형과 기본적인 명령어들</li>
</ol>

<h2 id="redis란-1">Redis란?</h2>

<ol>
  <li>기본적으로 키-값의 형태로 데이터를 저장하는 데이터베이스입니다.</li>
  <li>메모리에 데이터가 저장되는 인메모리 데이터베이스로 빠른 응답속도를 가지며 동시에 주기적으로 데이터를 디스크에 저장함으로써 영속성을 보장하는 데이터베이스입니다.</li>
  <li>싱글 쓰레드로 작동하기 때문에 긴 트랜젝션이 들어오는 경우에는 그 요청을 처리하는 동안 다른 요청을 처리할 수 없다는 단점이 있으나 원자성을 자동적으로 보장해주는 장점이 있는 데이터베이스 입니다.</li>
</ol>

<p>종합적으로 Redis는 빠른 응답속도를 가지고 있으면서도 데이터를 영구적으로 NoSQL 방식으로 다양한 형식으로 저장할 수 있는 데이터베이스입니다.</p>

<h2 id="redis---nosql">Redis - NoSQL</h2>

<p>고정된 열과 행을 가지는 테이블을 이용하는 관계형 데이터베이스 모델을 따르지 않는 모든 데이터 베이스 모델을 의미합니다. 주로 사용되는 NoSQL의 종류로는 키-값 데이터베이스 모델, 와이어 컬럼 모델, 그래프 데이터베이스 모델이 있습니다.</p>

<h2 id="redis가-영속성을-보장하는-방법">Redis가 영속성을 보장하는 방법</h2>

<p>Redis는 인메모리 데이터베이스이지만 동시에 영속성을 보장하고 있습니다. 이러한 장점은 메모리에 저장되는 데이터를 주기적으로 DISK에 저장하는 형태로 이루어지며 저장하는 방식에 따라서 분류되는 RDB 방식과 AOF 방식을 사용하고 있습니다.</p>

<h3 id="rdb--방식">RDB  방식</h3>

<p>메모리의 스냅샷을 찍는 형태로 현재 메모리에 있는 정보를 그대로 디스크에 저장하고 불러오는 방식입니다. 메모리의 값을 그대로 사용하므로 불러오는 속도가 빠르며 크기가 작다는 장점이 있습니다. 반면에 백업이 진행되는 도중에 서버가 비정상적으로 종료되는 상황이 발생한다면 복원 지점의 데이터가 그대로 소실되는 단점이 있습니다.</p>

<h3 id="aof-방식">AOF 방식</h3>

<p>Redis에 일어난 쓰기/갱신 연산을 log에 저장하고 서버가 부팅되는 경우에 log에 기록된 연산을 다시 수행하는 방식입니다. 장점은 연산을 지속적으로 기록하기 때문에 서버가 비정상적으로 종료되더라도 데이터의 유실이 적으며 TEXT 형식으로 저장되기 떄문에 일어났던 연산을 수정하거나 확인하는 작업이 수월합니다. 단점은 로그를 모두 기록하므로 크기가 크며 불러오는 경우에는 일어났던 모든 연산을 다시 수행하여 최종 상태로 만들어야 하기 때문에 속도가 느립니다. 이때 AOF 방식의 경우 단점을 보완하기 위해서 로그를 연산을 수행한 특정 상태로 만드는 REWRITE 명령어가 있습니다.</p>

<p>RDB 방식과 AOF 방식, 그리고 관련된 설정은 Redis의 설정파일인 /etc/redis/redis.conf에서 확인하고 수정할 수 있습니다.</p>

<h2 id="redis에서-자주-사용되는-자료형과-명령어">Redis에서 자주 사용되는 자료형과 명령어</h2>

<h3 id="데이터베이스-명령어">데이터베이스 명령어</h3>

<p>SELECT : 데이터베이스를 설정하는 명령어이며 Redis의 경우 기본 값으로 16개의 데이터베이스를 지원하며 기본값으로 시작할 경우 0번째 데이터베이스로 시작합니다.</p>

<p>FLUSHDB : 데이터베이스의 모든 데이터를 제거하는 명령어 입니다.</p>

<h3 id="set">Set</h3>

<p>SET : 데이터베이스에 키, 값으로 저장</p>

<p>GET : 데이터베이스에서 키를 기반으로 데이터를 불러오기</p>

<p>DELETE : 데이터베이스에서 키를 기반으로 삭제</p>

<h3 id="list">List</h3>

<p>PUSH와 POP 연산을 기반으로 작동합니다.</p>

<p>LPUSH : 왼쪽으로 데이터를 추가</p>

<p>RPUSH : 오른쪽으로 데이터를 추가</p>

<p>LPOP : 왼쪽의 데이터를 가져오고 삭제</p>

<p>RPOP : 오른쪽의 데이터를 가져오고 삭제</p>

<p>LINSERT : 왼쪽을 기준으로 데이터 값을 저장</p>

<p>LSET : 왼쪽을 기준으로 데이터 값을 변경</p>

<p>LRANGE : 리스트 값을 조회</p>

<h3 id="sets-sorted-sets">Sets, Sorted sets</h3>

<p>SADD : 집합에 데이터를 추가</p>

<p>SMEMBERS : 집합의 데이터를 조회</p>

<p>SREM : 집합의 데이터를 삭제</p>

<h3 id="hashes">Hashes</h3>

<p>HSET : hashes에 데이터를 추가</p>

<p>HDEL : hashes의 데이터를 삭제</p>

<p>HGETALL : hashes의 데이터를 조회</p>

<h2 id="참조-사이트">참조 사이트</h2>

<p><a href="http://www.redisgate.com/redis/command/sets.php">http://www.redisgate.com/redis/command/sets.php</a></p>

<p><a href="https://ryu-e.tistory.com/m/9">https://ryu-e.tistory.com/m/9</a></p>

<p><a href="https://codingmania.tistory.com/m/25">https://codingmania.tistory.com/m/25</a></p>

<p><a href="https://redis.io/commands/">https://redis.io/commands/</a></p>

<p><a href="http://www.redisgate.com/redis/command/sets.php">http://www.redisgate.com/redis/command/</a></p>]]></content><author><name>강민구</name></author><summary type="html"><![CDATA[Redis란?]]></summary></entry><entry><title type="html">새로운 만남 - New Face from Viet Nam</title><link href="http://localhost:4000/2022/11/15/new_face.html" rel="alternate" type="text/html" title="새로운 만남 - New Face from Viet Nam" /><published>2022-11-15T00:00:00+09:00</published><updated>2022-11-15T00:00:00+09:00</updated><id>http://localhost:4000/2022/11/15/new_face</id><content type="html" xml:base="http://localhost:4000/2022/11/15/new_face.html"><![CDATA[<p>에어릭스 개발팀에 새로운 얼굴들이 나타났습니다. 바다 건너 베트남에서 온 개발자 Dang Quang Tuan(당꾸안투안, Lex)씨와 Ngo khanh Duy(응옥한유이, Tommy)씨를 환영합니다.</p>

<p>한국이 익숙하지않은 두 분을 위해 직접 인천공항으로 픽업을 나갔습니다. 영어에 유창하지만, 울렁증이 있다는 김영규 대리님을 위해, 의리 있는 제가 함께 공항으로 갔습니다.</p>

<p><img src="/img/posts/2022-11-15/nse-5502856638730671901-693.jpg" alt="panel" width="100%" class="center" /></p>

<p>준비성이 무척이나 철저한 모습입니다.</p>

<p><img src="/img/posts/2022-11-15/nse-1015362486945153275-691.jpg" alt="baseball" width="100%" class="center" /></p>

<p>입국 수속이 늦어지며 힘들어지던 때에 유명 야구선수 최지만 선수가 입국하는 모습도 보았습니다. 취재 열기가 장난이 아니었습니다.</p>

<p><del>사실 저와 김영규 대리님 둘 다 누구인지 몰라서 두리번거렸습니다…</del></p>

<p><img src="/img/posts/2022-11-15/nse-3466361857878663043-686.jpg" alt="chicken" width="100%" class="center" />
시간이 늦어진 만큼 재빠르게 이동해 저녁 식사를 함께했습니다. 원래 맛초킹을 시키려고 했는데, 매운 치킨을 강력히 주장하는 Lex씨 덕에 김영규 대리님은 매운맛에 고통받았습니다. 😆😆😆</p>

<p>손님 맞이한 두 명도 정신이 없어 많은 사진을 남기지 못한 것이 아쉽습니다. 앞으로 두 개발자분에 대한 더 많은 이야기를 남겨보겠습니다.
두 개발자 분의 활약을 응원해주세요!</p>]]></content><author><name>강민석</name></author><summary type="html"><![CDATA[에어릭스 개발팀에 새로운 얼굴들이 나타났습니다. 바다 건너 베트남에서 온 개발자 Dang Quang Tuan(당꾸안투안, Lex)씨와 Ngo khanh Duy(응옥한유이, Tommy)씨를 환영합니다.]]></summary></entry></feed>